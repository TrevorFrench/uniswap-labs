---
title: "Define and Compute Metrics"
---

## Active Users

```{python}
#| echo: false
#| output: false
###########################################
#### alter this code at your own risk! ####
###########################################

!pip install pandasql SQLAlchemy==1.4.46

import pandas as pd
from pandasql import sqldf
import seaborn as sns

public_path="https://storage.googleapis.com/uniswap-analytics-assignment"

protocol_swaps=pd.read_csv(f"{public_path}/protocol_swaps.csv")
labs_swaps=pd.read_csv(f"{public_path}/labs_swaps.csv")
web_events=pd.read_csv(f"{public_path}/web_events.csv")
mobile_events=pd.read_csv(f"{public_path}/mobile_events.csv")


###########################################
#### alter this code at your own risk! ####
###########################################
```

### Daily Active Users

The number of distinct users who have interacted with the web, mobile, or either platform each day.

```{python}
dau = sqldf("""
  WITH mobile AS (
    SELECT SUBSTR(event_time, 1, 10) AS day,
           COUNT(DISTINCT unicorn_id) AS daily_active_users
    FROM mobile_events
    GROUP BY day
    ORDER BY day
  ), web AS (
    SELECT SUBSTR(event_time, 1, 10) AS day,
           COUNT(DISTINCT unicorn_id) AS daily_active_users
    FROM web_events
    GROUP BY day
    ORDER BY day
  ), total AS (
    SELECT SUBSTR(event_time, 1, 10) AS day,
           COUNT(DISTINCT unicorn_id) AS daily_active_users
    FROM (
        SELECT event_time, unicorn_id FROM web_events
        UNION ALL
        SELECT event_time, unicorn_id FROM mobile_events
    ) AS all_events
    GROUP BY day
    ORDER BY day
  )
  SELECT m.day AS day
    , m.daily_active_users AS mobile
    , w.daily_active_users AS web
    , t.daily_active_users AS total 
  FROM mobile m
  LEFT JOIN web w ON m.day = w.day
  LEFT JOIN total t ON m.day = t.day
""")
dau.head()
```

### Monthly Active Users

The number of distinct users who have interacted with the web, mobile, or either platform each month.

```{python}
mau = sqldf("""
  WITH mobile AS (
    SELECT SUBSTR(event_time, 1, 7) AS month,
           COUNT(DISTINCT unicorn_id) AS monthly_active_users
    FROM mobile_events
    GROUP BY month
    ORDER BY month
  ), web AS (
    SELECT SUBSTR(event_time, 1, 7) AS month,
           COUNT(DISTINCT unicorn_id) AS monthly_active_users
    FROM web_events
    GROUP BY month
    ORDER BY month
  ), total AS (
    SELECT SUBSTR(event_time, 1, 7) AS month,
           COUNT(DISTINCT unicorn_id) AS monthly_active_users
    FROM (
        SELECT event_time, unicorn_id FROM web_events
        UNION ALL
        SELECT event_time, unicorn_id FROM mobile_events
    ) AS all_events
    GROUP BY month
    ORDER BY month
  )
  SELECT m.month AS month
    , m.monthly_active_users AS mobile
    , w.monthly_active_users AS web
    , t.monthly_active_users AS total 
  FROM mobile m
  LEFT JOIN web w ON m.month = w.month
  LEFT JOIN total t ON m.month = t.month
""")
mau.head()
```

### Stickiness

The number of DAUs divided by the number of MAUs for the web, mobile, or either UL product.

```{python}
# Set the display format to show more decimal places
pd.set_option('display.float_format', '{:.4f}'.format)

stickiness = sqldf("""
    SELECT d.day
      , ROUND((CAST(d.mobile AS real) / CAST(m.mobile AS REAL)), 4) AS mobile
      , ROUND((CAST(d.web AS real) / CAST(m.web AS REAL)), 4) AS web
      , ROUND((CAST(d.total AS real) / CAST(m.total AS REAL)), 4) AS total
    FROM dau d
    LEFT JOIN mau m
    ON SUBSTR(d.day, 1, 7) = m.month
""")
stickiness.head()
```

## Retention

### Repeat Purchase Ratio

Percent of customers who execute more than one swap through the protocol. This metric is calculated for the mobile product, the web product, and all UL products combined.

```{python}
rpt_txn = sqldf("""
  WITH temp_table AS (
    SELECT SUBSTR(block_date, 1, 7) AS month
      , platform
      , unicorn_id
      , COUNT(DISTINCT l.txn_hash) AS swap_count
    FROM labs_swaps l
    LEFT JOIN protocol_swaps p
    ON l.txn_hash = p.txn_hash
    GROUP BY SUBSTR(block_date, 1, 7), platform, unicorn_id
  ) 
  SELECT month
    , ROUND((SUM(CASE WHEN (swap_count > 1 AND platform = 'Mobile') THEN 1 END) * 1.0) / (SUM(CASE WHEN platform = 'Mobile' THEN 1 END) * 1.0), 4) AS mobile
    , ROUND((SUM(CASE WHEN (swap_count > 1 AND platform = 'Web') THEN 1 END) * 1.0) / (SUM(CASE WHEN platform = 'Web' THEN 1 END) * 1.0), 4) AS web
    , ROUND((SUM(CASE WHEN (swap_count > 1) THEN 1 END) * 1.0) / COUNT(DISTINCT unicorn_id), 4) AS total
  FROM temp_table
  GROUP BY month
""")
rpt_txn.head()
```

## Funnel Analysis

### User Funnel

The user funnel counts the number of distinct users who have loaded the application, received a swap quote, and executed a swap. This is calculated for both the mobile and the web product.

```{python}
user_funnel = sqldf("""
  WITH web AS (
    SELECT "Web" AS source
      , event_name
      , COUNT(DISTINCT unicorn_id) AS user_count
    FROM web_events
    WHERE SUBSTR(event_time, 1, 7) = "2023-04"
    GROUP BY source, event_name
  ), mobile AS (
    SELECT "Mobile" AS source
      , event_name
      , COUNT(DISTINCT unicorn_id) AS user_count
    FROM mobile_events
    WHERE SUBSTR(event_time, 1, 7) = "2023-04"
    GROUP BY source, event_name  
  ), swaps AS (
    SELECT platform AS source
      , "Swap Executed" AS event_name
      , COUNT(DISTINCT unicorn_id) AS user_count
    FROM labs_swaps l
    LEFT JOIN protocol_swaps p ON l.txn_hash = p.txn_hash
    WHERE SUBSTR(block_date, 1, 7) = "2023-04"
    GROUP BY source, event_name
  ) 
  SELECT source
    , SUM(CASE WHEN event_name = "Application Loaded" THEN user_count END) AS application_loaded
    , SUM(CASE WHEN event_name = "Swap Quote Received" THEN user_count END) AS swap_quote_received
    , SUM(CASE WHEN event_name = "Swap Executed" THEN user_count END) AS swap_executed
  FROM (
    SELECT * FROM web
    UNION ALL SELECT * FROM mobile
    UNION ALL SELECT * FROM swaps
  )
  GROUP BY source;
""")
user_funnel.head()
```

### Event Funnel

The event funnel counts the number of times the application is loaded, swap quotes received, and swaps executed. This is calculated for both the mobile and the web product.

```{python}
event_funnel = sqldf("""
  WITH web AS (
    SELECT "Web" AS source
      , event_name
      , COUNT(*) AS event_count
    FROM web_events
    WHERE SUBSTR(event_time, 1, 7) = "2023-04"
    GROUP BY source, event_name
  ), mobile AS (
    SELECT "Mobile" AS source
      , event_name
      , COUNT(*) AS event_count
    FROM mobile_events
    WHERE SUBSTR(event_time, 1, 7) = "2023-04"
    GROUP BY source, event_name  
  ), swaps AS (
    SELECT platform AS source
      , "Swap Executed" AS event_name
      , COUNT(*) AS event_count
    FROM labs_swaps l
    LEFT JOIN protocol_swaps p ON l.txn_hash = p.txn_hash
    WHERE SUBSTR(block_date, 1, 7) = "2023-04"
    GROUP BY source, event_name
  ) 
  SELECT source
    , SUM(CASE WHEN event_name = "Application Loaded" THEN event_count END) AS application_loaded
    , SUM(CASE WHEN event_name = "Swap Quote Received" THEN event_count END) AS swap_quote_received
    , SUM(CASE WHEN event_name = "Swap Executed" THEN event_count END) AS swap_executed
  FROM (
    SELECT * FROM web
    UNION ALL SELECT * FROM mobile
    UNION ALL SELECT * FROM swaps
  )
  GROUP BY source;
""")
event_funnel.head()
```

## Swapping

### Market Share

Uniswap Lab's share of transaction volume executed on the protocol denominated in USD.

```{python}
market_share = sqldf("""
  SELECT SUBSTR(block_date, 1, 10) AS day
    , SUM(CASE WHEN platform IS NULL THEN usd_amount END) / SUM(usd_amount) AS protocol
    , SUM(CASE WHEN platform = "Mobile" THEN usd_amount END) / SUM(usd_amount) AS mobile
    , SUM(CASE WHEN platform = "Web" THEN usd_amount END) / SUM(usd_amount) AS web
  FROM protocol_swaps p
  LEFT JOIN labs_swaps l
  ON p.txn_hash = l.txn_hash
  GROUP BY day
""")
market_share.head()
```