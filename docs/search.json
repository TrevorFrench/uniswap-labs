[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to the Uniswap Labs analytics assignment!\nIn this exercise you will be presented synthetic data representing on-chain transactional data and user engagement events logged from our Web and Mobile products and asked to interpret the data to provide meaningful insights to the business.\nContext: In April, Uniswap launched its Mobile Wallet. You are being asked to perform an analysis on how the Wallet has performed in its first month and to compare user engagement of the Wallet to its Web app for the month of April.\nData (DataFrame) Schemas:\n\nprotocol_swaps:\n\nblock_date: Date of the block in which the swap occurred\ntxn_hash: Transaction hash of the swap\nwallet_address: Address of the wallet involved in the swap\ntoken_in_symbol: Symbol of the token being swapped in\ntoken_out_symbol: Symbol of the token being swapped out\nusd_amount: Estimated USD value of the swap\n\nNote: this data includes all swaps interacting with the Uniswap Protocol regardless of wether they originated from a Uniswap Labs product or not\nlabs_swaps:\n\ntxn_hash: Transaction hash of the swap originating from a Uniswap Labs product\nunicorn_id: Unique identifier of the client / device\nplatform: Platform from which the swap originated (‘Web’ or ‘Mobile’)\n\nweb_events:\n\nevent_time: Date and time of the event logged from the Web application\nevent_type: Type of the event (‘Application Loaded’ or ‘Swap Quote Received’)\nunicorn_id: Unique identifier of the client / device\n\nmobile_events:\n\nevent_time: Date and time of the event logged from the Mobile Wallet\nevent_type: Type of the event (‘Application Loaded’ or ‘Swap Quote Received’)\nunicorn_id: Unique identifier of the client / device\n\n\nUse the four datasets described to accomplish the following tasks:\n\nDefine and compute metrics related to:\n\n\nActive Users\nRetention\nFunnel Analysis\nSwapping\n\nNote: write the plain text definition of the metric and show how you compute it.\n\nSummarize and highlight insights (or issues) in user behavior across various segments based on these metrics. Please include written summarizations as well as data visualizations.\n\nNote: Should you progress to the virtual on-site, you will be asked to present your analysis / visualization.\nClone or copy this notebook and run this cell to begin. Once you do so you will be able to work with the data in python and/or write sql queries against the data (see example cells below). You may use additional analytics / data visualization packages you would like in this notebook.\nWhen submitting the assignment please provide a link to your notebook as well as a downloaded .pdf copy of your notebook.\nThe estimated time for this exercise is 3-4 hours. Please submit your answers to your recruiter. Good luck!\n\n###########################################\n#### alter this code at your own risk! ####\n###########################################\n\n!pip install pandasql SQLAlchemy==1.4.46\n\nimport pandas as pd\nfrom pandasql import sqldf\nimport seaborn as sns\n\npublic_path=\"https://storage.googleapis.com/uniswap-analytics-assignment\"\n\nprotocol_swaps=pd.read_csv(f\"{public_path}/protocol_swaps.csv\")\nlabs_swaps=pd.read_csv(f\"{public_path}/labs_swaps.csv\")\nweb_events=pd.read_csv(f\"{public_path}/web_events.csv\")\nmobile_events=pd.read_csv(f\"{public_path}/mobile_events.csv\")\n\n\n###########################################\n#### alter this code at your own risk! ####\n###########################################\n\nRequirement already satisfied: pandasql in c:\\miniconda\\lib\\site-packages (0.7.3)\nRequirement already satisfied: SQLAlchemy==1.4.46 in c:\\miniconda\\lib\\site-packages (1.4.46)\nRequirement already satisfied: greenlet!=0.4.17 in c:\\miniconda\\lib\\site-packages (from SQLAlchemy==1.4.46) (2.0.2)\nRequirement already satisfied: pandas in c:\\miniconda\\lib\\site-packages (from pandasql) (1.5.0)\nRequirement already satisfied: numpy in c:\\miniconda\\lib\\site-packages (from pandasql) (1.23.3)\nRequirement already satisfied: pytz>=2020.1 in c:\\miniconda\\lib\\site-packages (from pandas->pandasql) (2022.2.1)\nRequirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\trevor french\\appdata\\roaming\\python\\python39\\site-packages (from pandas->pandasql) (2.8.2)\nRequirement already satisfied: six>=1.5 in c:\\users\\trevor french\\appdata\\roaming\\python\\python39\\site-packages (from python-dateutil>=2.8.1->pandas->pandasql) (1.16.0)\n\n[notice] A new release of pip available: 22.1.2 -> 23.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "intro.html#examples",
    "href": "intro.html#examples",
    "title": "Introduction",
    "section": "Examples",
    "text": "Examples\n\n# Example querying a dataframe with SQL and storing the results as a dataframe\n\nmobile_swaps = sqldf(\"SELECT * FROM labs_swaps WHERE platform = 'Web'\")\nmobile_swaps.head()\n\n\n\n\n\n  \n    \n      \n      txn_hash\n      unicorn_id\n      platform\n    \n  \n  \n    \n      0\n      0xce66b8a06be0e6feb713c20b042c7074ad3c3685d575...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      1\n      0xff7665fc5ee264e45c2a5d6ec7c136c0318c33ae2b14...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      2\n      0x3d8fb4048555e1d9897b39a4f514f12e84104722f59a...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      3\n      0x88bacb84dc13ee701c526fb80fcf4e793d50afaeda54...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      4\n      0x08a72b8ff527d83bc05ff17ca2eb5b56f14c6df118a8...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n  \n\n\n\n\n\n# Example performing getting the same result using Pandas DataFrame subsetting\n\nmobile_swaps = labs_swaps.loc[labs_swaps.platform == 'Web']\nmobile_swaps.head()\n\n\n\n\n\n  \n    \n      \n      txn_hash\n      unicorn_id\n      platform\n    \n  \n  \n    \n      0\n      0xce66b8a06be0e6feb713c20b042c7074ad3c3685d575...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      1\n      0xff7665fc5ee264e45c2a5d6ec7c136c0318c33ae2b14...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      2\n      0x3d8fb4048555e1d9897b39a4f514f12e84104722f59a...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      3\n      0x88bacb84dc13ee701c526fb80fcf4e793d50afaeda54...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      4\n      0x08a72b8ff527d83bc05ff17ca2eb5b56f14c6df118a8...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web"
  },
  {
    "objectID": "metrics.html",
    "href": "metrics.html",
    "title": "Define and Compute Metrics",
    "section": "",
    "text": "The number of distinct users who have interacted with the web, mobile, or either platform each day.\n\ndau = sqldf(\"\"\"\n  WITH mobile AS (\n    SELECT SUBSTR(event_time, 1, 10) AS day,\n           COUNT(DISTINCT unicorn_id) AS daily_active_users\n    FROM mobile_events\n    GROUP BY day\n    ORDER BY day\n  ), web AS (\n    SELECT SUBSTR(event_time, 1, 10) AS day,\n           COUNT(DISTINCT unicorn_id) AS daily_active_users\n    FROM web_events\n    GROUP BY day\n    ORDER BY day\n  ), total AS (\n    SELECT SUBSTR(event_time, 1, 10) AS day,\n           COUNT(DISTINCT unicorn_id) AS daily_active_users\n    FROM (\n        SELECT event_time, unicorn_id FROM web_events\n        UNION ALL\n        SELECT event_time, unicorn_id FROM mobile_events\n    ) AS all_events\n    GROUP BY day\n    ORDER BY day\n  )\n  SELECT m.day AS day\n    , m.daily_active_users AS mobile\n    , w.daily_active_users AS web\n    , t.daily_active_users AS total \n  FROM mobile m\n  LEFT JOIN web w ON m.day = w.day\n  LEFT JOIN total t ON m.day = t.day\n\"\"\")\ndau.head()\n\n\n\n\n\n  \n    \n      \n      day\n      mobile\n      web\n      total\n    \n  \n  \n    \n      0\n      2023-04-01\n      155\n      38784\n      38939\n    \n    \n      1\n      2023-04-02\n      122\n      39171\n      39293\n    \n    \n      2\n      2023-04-03\n      125\n      43008\n      43133\n    \n    \n      3\n      2023-04-04\n      121\n      47343\n      47464\n    \n    \n      4\n      2023-04-05\n      131\n      49519\n      49650\n    \n  \n\n\n\n\n\n\n\nThe number of distinct users who have interacted with the web, mobile, or either platform each month.\n\nmau = sqldf(\"\"\"\n  WITH mobile AS (\n    SELECT SUBSTR(event_time, 1, 7) AS month,\n           COUNT(DISTINCT unicorn_id) AS monthly_active_users\n    FROM mobile_events\n    GROUP BY month\n    ORDER BY month\n  ), web AS (\n    SELECT SUBSTR(event_time, 1, 7) AS month,\n           COUNT(DISTINCT unicorn_id) AS monthly_active_users\n    FROM web_events\n    GROUP BY month\n    ORDER BY month\n  ), total AS (\n    SELECT SUBSTR(event_time, 1, 7) AS month,\n           COUNT(DISTINCT unicorn_id) AS monthly_active_users\n    FROM (\n        SELECT event_time, unicorn_id FROM web_events\n        UNION ALL\n        SELECT event_time, unicorn_id FROM mobile_events\n    ) AS all_events\n    GROUP BY month\n    ORDER BY month\n  )\n  SELECT m.month AS month\n    , m.monthly_active_users AS mobile\n    , w.monthly_active_users AS web\n    , t.monthly_active_users AS total \n  FROM mobile m\n  LEFT JOIN web w ON m.month = w.month\n  LEFT JOIN total t ON m.month = t.month\n\"\"\")\nmau.head()\n\n\n\n\n\n  \n    \n      \n      month\n      mobile\n      web\n      total\n    \n  \n  \n    \n      0\n      2023-04\n      18373\n      762898\n      781271\n    \n  \n\n\n\n\n\n\n\nThe number of DAUs divided by the number of MAUs for the web, mobile, or either UL product.\n\n# Set the display format to show more decimal places\npd.set_option('display.float_format', '{:.4f}'.format)\n\nstickiness = sqldf(\"\"\"\n    SELECT d.day\n      , ROUND((CAST(d.mobile AS real) / CAST(m.mobile AS REAL)), 4) AS mobile\n      , ROUND((CAST(d.web AS real) / CAST(m.web AS REAL)), 4) AS web\n      , ROUND((CAST(d.total AS real) / CAST(m.total AS REAL)), 4) AS total\n    FROM dau d\n    LEFT JOIN mau m\n    ON SUBSTR(d.day, 1, 7) = m.month\n\"\"\")\nstickiness.head()\n\n\n\n\n\n  \n    \n      \n      day\n      mobile\n      web\n      total\n    \n  \n  \n    \n      0\n      2023-04-01\n      0.0084\n      0.0508\n      0.0498\n    \n    \n      1\n      2023-04-02\n      0.0066\n      0.0513\n      0.0503\n    \n    \n      2\n      2023-04-03\n      0.0068\n      0.0564\n      0.0552\n    \n    \n      3\n      2023-04-04\n      0.0066\n      0.0621\n      0.0608\n    \n    \n      4\n      2023-04-05\n      0.0071\n      0.0649\n      0.0636"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "protocol_swaps.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1513074 entries, 0 to 1513073\nData columns (total 6 columns):\n #   Column            Non-Null Count    Dtype  \n---  ------            --------------    -----  \n 0   block_date        1513074 non-null  object \n 1   txn_hash          1513074 non-null  object \n 2   wallet_address    1513074 non-null  object \n 3   token_in_symbol   1253589 non-null  object \n 4   token_out_symbol  1404664 non-null  object \n 5   usd_amount        1507193 non-null  float64\ndtypes: float64(1), object(5)\nmemory usage: 69.3+ MB\n\n\n\nprotocol_swaps.head()\n\n\n\n\n\n  \n    \n      \n      block_date\n      txn_hash\n      wallet_address\n      token_in_symbol\n      token_out_symbol\n      usd_amount\n    \n  \n  \n    \n      0\n      2023-04-30\n      0x637119eddd6696aa93586b80758d85c91b484afa27f5...\n      0x44521ff73ad8521f24f6199115e06522f2dbf6a2\n      NaN\n      BOB\n      15.10\n    \n    \n      1\n      2023-04-14\n      0xf0fcdabf801d5b2758f90d6adc2e36acc73ed7d3cd67...\n      0xd03b04cb2e8647ede75fd5ef3b7d097551cd2586\n      NaN\n      DAI\n      984.87\n    \n    \n      2\n      2023-04-21\n      0xe1ef50c198c9c3480107ee8f3f9f80448cd3f2cee5db...\n      0xd63b539905fc31e6c20c047aa91609ce14ceb8d4\n      NaN\n      BTCH\n      NaN\n    \n    \n      3\n      2023-04-30\n      0xfbda1c5e02710c6161ba18bd414d7f7f063c1c114b74...\n      0x44521ff73ad8521f24f6199115e06522f2dbf6a2\n      NaN\n      BOB\n      187.66\n    \n    \n      4\n      2023-04-30\n      0x10ce753363bb3e9aaa547449578b0da05f5bb5892cf8...\n      0x5a45f1419ceddb75f11ce96e60845d73ae0f8df8\n      NaN\n      BOB\n      247.33\n    \n  \n\n\n\n\n\nprotocol_swaps.describe()\n\n\n\n\n\n  \n    \n      \n      usd_amount\n    \n  \n  \n    \n      count\n      1.507193e+06\n    \n    \n      mean\n      4.575295e+03\n    \n    \n      std\n      5.124432e+04\n    \n    \n      min\n      0.000000e+00\n    \n    \n      25%\n      9.949000e+01\n    \n    \n      50%\n      2.860100e+02\n    \n    \n      75%\n      9.705400e+02\n    \n    \n      max\n      9.737525e+06\n    \n  \n\n\n\n\n\nprint(protocol_swaps['block_date'].min())\nprint(protocol_swaps['block_date'].max())\n\n2023-04-01\n\n\n2023-04-30"
  },
  {
    "objectID": "eda.html#labs-swaps",
    "href": "eda.html#labs-swaps",
    "title": "Exploratory Data Analysis",
    "section": "Labs Swaps",
    "text": "Labs Swaps\n\nlabs_swaps.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 552604 entries, 0 to 552603\nData columns (total 3 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   txn_hash    552604 non-null  object\n 1   unicorn_id  552604 non-null  object\n 2   platform    552604 non-null  object\ndtypes: object(3)\nmemory usage: 12.6+ MB\n\n\n\nlabs_swaps.head()\n\n\n\n\n\n  \n    \n      \n      txn_hash\n      unicorn_id\n      platform\n    \n  \n  \n    \n      0\n      0xce66b8a06be0e6feb713c20b042c7074ad3c3685d575...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      1\n      0xff7665fc5ee264e45c2a5d6ec7c136c0318c33ae2b14...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      2\n      0x3d8fb4048555e1d9897b39a4f514f12e84104722f59a...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      3\n      0x88bacb84dc13ee701c526fb80fcf4e793d50afaeda54...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      4\n      0x08a72b8ff527d83bc05ff17ca2eb5b56f14c6df118a8...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n  \n\n\n\n\n\nlabs_swaps['platform'].value_counts()\n\nWeb       543774\nMobile      8830\nName: platform, dtype: int64"
  },
  {
    "objectID": "eda.html#web-events",
    "href": "eda.html#web-events",
    "title": "Exploratory Data Analysis",
    "section": "Web Events",
    "text": "Web Events\n\nweb_events.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 8477458 entries, 0 to 8477457\nData columns (total 3 columns):\n #   Column      Dtype \n---  ------      ----- \n 0   unicorn_id  object\n 1   event_name  object\n 2   event_time  object\ndtypes: object(3)\nmemory usage: 194.0+ MB\n\n\n\nweb_events.head()\n\n\n\n\n\n  \n    \n      \n      unicorn_id\n      event_name\n      event_time\n    \n  \n  \n    \n      0\n      0x0000125bd48653eeaceafead0f4fe43a431735b3\n      Application Loaded\n      2023-04-29 07:40:26.944 UTC\n    \n    \n      1\n      0x000029d347a6dcd614bc2c7fd7d418ca003b2426\n      Application Loaded\n      2023-04-29 08:19:46.782 UTC\n    \n    \n      2\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Application Loaded\n      2023-04-23 12:52:31.747 UTC\n    \n    \n      3\n      0x0000473a6b47028a8e35a79c557543f5a1b51512\n      Application Loaded\n      2023-04-28 05:49:24.614 UTC\n    \n    \n      4\n      0x000084aeab9f66743999c4ab093542cc07ac5ebc\n      Application Loaded\n      2023-04-22 10:43:15.075 UTC\n    \n  \n\n\n\n\n\nweb_events['event_name'].value_counts()\n\nApplication Loaded     4864874\nSwap Quote Received    3612584\nName: event_name, dtype: int64\n\n\n\nprint(web_events['event_time'].min())\nprint(web_events['event_time'].max())\n\n2023-04-01 00:00:01.425 UTC\n2023-04-30 23:59:59.951 UTC"
  },
  {
    "objectID": "eda.html#mobile-events",
    "href": "eda.html#mobile-events",
    "title": "Exploratory Data Analysis",
    "section": "Mobile Events",
    "text": "Mobile Events\n\nmobile_events.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 284932 entries, 0 to 284931\nData columns (total 3 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   unicorn_id  284932 non-null  object\n 1   event_name  284932 non-null  object\n 2   event_time  284932 non-null  object\ndtypes: object(3)\nmemory usage: 6.5+ MB\n\n\n\nmobile_events.head()\n\n\n\n\n\n  \n    \n      \n      unicorn_id\n      event_name\n      event_time\n    \n  \n  \n    \n      0\n      0x00006fceeb430381f44fd81f314bf8319eef86bf\n      Application Loaded\n      2023-04-14 06:18:44.495 UTC\n    \n    \n      1\n      0x0004e7c3e46bd29db9b82822b4747ab3b8cc1469\n      Application Loaded\n      2023-04-14 17:58:26.582 UTC\n    \n    \n      2\n      0x0004e7c3e46bd29db9b82822b4747ab3b8cc1469\n      Application Loaded\n      2023-04-25 10:11:17.791 UTC\n    \n    \n      3\n      0x0004e7c3e46bd29db9b82822b4747ab3b8cc1469\n      Application Loaded\n      2023-04-13 22:17:45.081 UTC\n    \n    \n      4\n      0x0004e7c3e46bd29db9b82822b4747ab3b8cc1469\n      Application Loaded\n      2023-04-25 15:08:21.378 UTC\n    \n  \n\n\n\n\n\nmobile_events['event_name'].value_counts()\n\nApplication Loaded     143634\nSwap Quote Received    141298\nName: event_name, dtype: int64\n\n\n\nprint(mobile_events['event_time'].min())\nprint(mobile_events['event_time'].max())\n\n2023-04-01 00:10:01.157 UTC\n2023-04-30 23:59:59.012 UTC"
  },
  {
    "objectID": "metrics.html#retention",
    "href": "metrics.html#retention",
    "title": "Define and Compute Metrics",
    "section": "Retention",
    "text": "Retention\n\nRepeat Purchase Ratio\nPercent of customers who execute more than one swap through the protocol. This metric is calculated for the mobile product, the web product, and all UL products combined.\n\nrpt_txn = sqldf(\"\"\"\n  WITH temp_table AS (\n    SELECT SUBSTR(block_date, 1, 7) AS month\n      , platform\n      , unicorn_id\n      , COUNT(DISTINCT l.txn_hash) AS swap_count\n    FROM labs_swaps l\n    LEFT JOIN protocol_swaps p\n    ON l.txn_hash = p.txn_hash\n    GROUP BY SUBSTR(block_date, 1, 7), platform, unicorn_id\n  ) \n  SELECT month\n    , ROUND((SUM(CASE WHEN (swap_count > 1 AND platform = 'Mobile') THEN 1 END) * 1.0) / (SUM(CASE WHEN platform = 'Mobile' THEN 1 END) * 1.0), 4) AS mobile\n    , ROUND((SUM(CASE WHEN (swap_count > 1 AND platform = 'Web') THEN 1 END) * 1.0) / (SUM(CASE WHEN platform = 'Web' THEN 1 END) * 1.0), 4) AS web\n    , ROUND((SUM(CASE WHEN (swap_count > 1) THEN 1 END) * 1.0) / COUNT(DISTINCT unicorn_id), 4) AS total\n  FROM temp_table\n  GROUP BY month\n\"\"\")\nrpt_txn.head()\n\n\n\n\n\n  \n    \n      \n      month\n      mobile\n      web\n      total\n    \n  \n  \n    \n      0\n      2023-04\n      0.5857\n      0.5329\n      0.5341"
  },
  {
    "objectID": "metrics.html#funnel-analysis",
    "href": "metrics.html#funnel-analysis",
    "title": "Define and Compute Metrics",
    "section": "Funnel Analysis",
    "text": "Funnel Analysis\n\nUser Funnel\nThe user funnel counts the number of distinct users who have loaded the application, received a swap quote, and executed a swap. This is calculated for both the mobile and the web product.\n\nuser_funnel = sqldf(\"\"\"\n  WITH web AS (\n    SELECT \"Web\" AS source\n      , event_name\n      , COUNT(DISTINCT unicorn_id) AS user_count\n    FROM web_events\n    WHERE SUBSTR(event_time, 1, 7) = \"2023-04\"\n    GROUP BY source, event_name\n  ), mobile AS (\n    SELECT \"Mobile\" AS source\n      , event_name\n      , COUNT(DISTINCT unicorn_id) AS user_count\n    FROM mobile_events\n    WHERE SUBSTR(event_time, 1, 7) = \"2023-04\"\n    GROUP BY source, event_name  \n  ), swaps AS (\n    SELECT platform AS source\n      , \"Swap Executed\" AS event_name\n      , COUNT(DISTINCT unicorn_id) AS user_count\n    FROM labs_swaps l\n    LEFT JOIN protocol_swaps p ON l.txn_hash = p.txn_hash\n    WHERE SUBSTR(block_date, 1, 7) = \"2023-04\"\n    GROUP BY source, event_name\n  ) \n  SELECT source\n    , SUM(CASE WHEN event_name = \"Application Loaded\" THEN user_count END) AS application_loaded\n    , SUM(CASE WHEN event_name = \"Swap Quote Received\" THEN user_count END) AS swap_quote_received\n    , SUM(CASE WHEN event_name = \"Swap Executed\" THEN user_count END) AS swap_executed\n  FROM (\n    SELECT * FROM web\n    UNION ALL SELECT * FROM mobile\n    UNION ALL SELECT * FROM swaps\n  )\n  GROUP BY source;\n\"\"\")\nuser_funnel.head()\n\n\n\n\n\n  \n    \n      \n      source\n      application_loaded\n      swap_quote_received\n      swap_executed\n    \n  \n  \n    \n      0\n      Mobile\n      18362\n      5906\n      2078\n    \n    \n      1\n      Web\n      762632\n      342626\n      95296\n    \n  \n\n\n\n\n\n\nEvent Funnel\nThe event funnel counts the number of times the application is loaded, swap quotes received, and swaps executed. This is calculated for both the mobile and the web product.\n\nevent_funnel = sqldf(\"\"\"\n  WITH web AS (\n    SELECT \"Web\" AS source\n      , event_name\n      , COUNT(*) AS event_count\n    FROM web_events\n    WHERE SUBSTR(event_time, 1, 7) = \"2023-04\"\n    GROUP BY source, event_name\n  ), mobile AS (\n    SELECT \"Mobile\" AS source\n      , event_name\n      , COUNT(*) AS event_count\n    FROM mobile_events\n    WHERE SUBSTR(event_time, 1, 7) = \"2023-04\"\n    GROUP BY source, event_name  \n  ), swaps AS (\n    SELECT platform AS source\n      , \"Swap Executed\" AS event_name\n      , COUNT(*) AS event_count\n    FROM labs_swaps l\n    LEFT JOIN protocol_swaps p ON l.txn_hash = p.txn_hash\n    WHERE SUBSTR(block_date, 1, 7) = \"2023-04\"\n    GROUP BY source, event_name\n  ) \n  SELECT source\n    , SUM(CASE WHEN event_name = \"Application Loaded\" THEN event_count END) AS application_loaded\n    , SUM(CASE WHEN event_name = \"Swap Quote Received\" THEN event_count END) AS swap_quote_received\n    , SUM(CASE WHEN event_name = \"Swap Executed\" THEN event_count END) AS swap_executed\n  FROM (\n    SELECT * FROM web\n    UNION ALL SELECT * FROM mobile\n    UNION ALL SELECT * FROM swaps\n  )\n  GROUP BY source;\n\"\"\")\nevent_funnel.head()\n\n\n\n\n\n  \n    \n      \n      source\n      application_loaded\n      swap_quote_received\n      swap_executed\n    \n  \n  \n    \n      0\n      Mobile\n      143634\n      141298\n      8830\n    \n    \n      1\n      Web\n      4864874\n      3612584\n      543774"
  },
  {
    "objectID": "metrics.html#swapping",
    "href": "metrics.html#swapping",
    "title": "Define and Compute Metrics",
    "section": "Swapping",
    "text": "Swapping\n\nMarket Share\nUniswap Lab’s share of transaction volume executed on the protocol denominated in USD.\n\nmarket_share = sqldf(\"\"\"\n  SELECT SUBSTR(block_date, 1, 10) AS day\n    , SUM(CASE WHEN platform IS NULL THEN usd_amount END) / SUM(usd_amount) AS protocol\n    , SUM(CASE WHEN platform = \"Mobile\" THEN usd_amount END) / SUM(usd_amount) AS mobile\n    , SUM(CASE WHEN platform = \"Web\" THEN usd_amount END) / SUM(usd_amount) AS web\n  FROM protocol_swaps p\n  LEFT JOIN labs_swaps l\n  ON p.txn_hash = l.txn_hash\n  GROUP BY day\n\"\"\")\nmarket_share.head()\n\n\n\n\n\n  \n    \n      \n      day\n      protocol\n      mobile\n      web\n    \n  \n  \n    \n      0\n      2023-04-01\n      0.8670\n      0.0000\n      0.1330\n    \n    \n      1\n      2023-04-02\n      0.8833\n      0.0001\n      0.1166\n    \n    \n      2\n      2023-04-03\n      0.8527\n      0.0000\n      0.1472\n    \n    \n      3\n      2023-04-04\n      0.8546\n      0.0000\n      0.1453\n    \n    \n      4\n      2023-04-05\n      0.8312\n      0.0000\n      0.1688"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Welcome to the Uniswap Labs analytics assignment!\nIn this exercise you will be presented synthetic data representing on-chain transactional data and user engagement events logged from our Web and Mobile products and asked to interpret the data to provide meaningful insights to the business.\nContext: In April, Uniswap launched its Mobile Wallet. You are being asked to perform an analysis on how the Wallet has performed in its first month and to compare user engagement of the Wallet to its Web app for the month of April.\nData (DataFrame) Schemas:\n\nprotocol_swaps:\n\nblock_date: Date of the block in which the swap occurred\ntxn_hash: Transaction hash of the swap\nwallet_address: Address of the wallet involved in the swap\ntoken_in_symbol: Symbol of the token being swapped in\ntoken_out_symbol: Symbol of the token being swapped out\nusd_amount: Estimated USD value of the swap\n\nNote: this data includes all swaps interacting with the Uniswap Protocol regardless of wether they originated from a Uniswap Labs product or not\nlabs_swaps:\n\ntxn_hash: Transaction hash of the swap originating from a Uniswap Labs product\nunicorn_id: Unique identifier of the client / device\nplatform: Platform from which the swap originated (‘Web’ or ‘Mobile’)\n\nweb_events:\n\nevent_time: Date and time of the event logged from the Web application\nevent_type: Type of the event (‘Application Loaded’ or ‘Swap Quote Received’)\nunicorn_id: Unique identifier of the client / device\n\nmobile_events:\n\nevent_time: Date and time of the event logged from the Mobile Wallet\nevent_type: Type of the event (‘Application Loaded’ or ‘Swap Quote Received’)\nunicorn_id: Unique identifier of the client / device\n\n\nUse the four datasets described to accomplish the following tasks:\n\nDefine and compute metrics related to:\n\n\nActive Users\nRetention\nFunnel Analysis\nSwapping\n\nNote: write the plain text definition of the metric and show how you compute it.\n\nSummarize and highlight insights (or issues) in user behavior across various segments based on these metrics. Please include written summarizations as well as data visualizations.\n\nNote: Should you progress to the virtual on-site, you will be asked to present your analysis / visualization.\nClone or copy this notebook and run this cell to begin. Once you do so you will be able to work with the data in python and/or write sql queries against the data (see example cells below). You may use additional analytics / data visualization packages you would like in this notebook.\nWhen submitting the assignment please provide a link to your notebook as well as a downloaded .pdf copy of your notebook.\nThe estimated time for this exercise is 3-4 hours. Please submit your answers to your recruiter. Good luck!\n\n###########################################\n#### alter this code at your own risk! ####\n###########################################\n\n!pip install pandasql SQLAlchemy==1.4.46\n\nimport pandas as pd\nfrom pandasql import sqldf\nimport seaborn as sns\n\npublic_path=\"https://storage.googleapis.com/uniswap-analytics-assignment\"\n\nprotocol_swaps=pd.read_csv(f\"{public_path}/protocol_swaps.csv\")\nlabs_swaps=pd.read_csv(f\"{public_path}/labs_swaps.csv\")\nweb_events=pd.read_csv(f\"{public_path}/web_events.csv\")\nmobile_events=pd.read_csv(f\"{public_path}/mobile_events.csv\")\n\n\n###########################################\n#### alter this code at your own risk! ####\n###########################################\n\nRequirement already satisfied: pandasql in c:\\miniconda\\lib\\site-packages (0.7.3)\nRequirement already satisfied: SQLAlchemy==1.4.46 in c:\\miniconda\\lib\\site-packages (1.4.46)\nRequirement already satisfied: greenlet!=0.4.17 in c:\\miniconda\\lib\\site-packages (from SQLAlchemy==1.4.46) (2.0.2)\nRequirement already satisfied: numpy in c:\\miniconda\\lib\\site-packages (from pandasql) (1.23.3)\nRequirement already satisfied: pandas in c:\\miniconda\\lib\\site-packages (from pandasql) (1.5.0)\nRequirement already satisfied: python-dateutil>=2.8.1 in c:\\users\\trevor french\\appdata\\roaming\\python\\python39\\site-packages (from pandas->pandasql) (2.8.2)\nRequirement already satisfied: pytz>=2020.1 in c:\\miniconda\\lib\\site-packages (from pandas->pandasql) (2022.2.1)\nRequirement already satisfied: six>=1.5 in c:\\users\\trevor french\\appdata\\roaming\\python\\python39\\site-packages (from python-dateutil>=2.8.1->pandas->pandasql) (1.16.0)\n\n[notice] A new release of pip available: 22.1.2 -> 23.1.2\n[notice] To update, run: python.exe -m pip install --upgrade pip"
  },
  {
    "objectID": "index.html#examples",
    "href": "index.html#examples",
    "title": "Introduction",
    "section": "Examples",
    "text": "Examples\n\n# Example querying a dataframe with SQL and storing the results as a dataframe\n\nmobile_swaps = sqldf(\"SELECT * FROM labs_swaps WHERE platform = 'Web'\")\nmobile_swaps.head()\n\n\n\n\n\n  \n    \n      \n      txn_hash\n      unicorn_id\n      platform\n    \n  \n  \n    \n      0\n      0xce66b8a06be0e6feb713c20b042c7074ad3c3685d575...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      1\n      0xff7665fc5ee264e45c2a5d6ec7c136c0318c33ae2b14...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      2\n      0x3d8fb4048555e1d9897b39a4f514f12e84104722f59a...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      3\n      0x88bacb84dc13ee701c526fb80fcf4e793d50afaeda54...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      4\n      0x08a72b8ff527d83bc05ff17ca2eb5b56f14c6df118a8...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n  \n\n\n\n\n\n# Example performing getting the same result using Pandas DataFrame subsetting\n\nmobile_swaps = labs_swaps.loc[labs_swaps.platform == 'Web']\nmobile_swaps.head()\n\n\n\n\n\n  \n    \n      \n      txn_hash\n      unicorn_id\n      platform\n    \n  \n  \n    \n      0\n      0xce66b8a06be0e6feb713c20b042c7074ad3c3685d575...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      1\n      0xff7665fc5ee264e45c2a5d6ec7c136c0318c33ae2b14...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      2\n      0x3d8fb4048555e1d9897b39a4f514f12e84104722f59a...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      3\n      0x88bacb84dc13ee701c526fb80fcf4e793d50afaeda54...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web\n    \n    \n      4\n      0x08a72b8ff527d83bc05ff17ca2eb5b56f14c6df118a8...\n      0x0000428715b76146c268a248e374136a6c9e7a9a\n      Web"
  },
  {
    "objectID": "insights.html",
    "href": "insights.html",
    "title": "Summarize Inisghts",
    "section": "",
    "text": "Daily active users are still mostly web users.\n\nsns.lineplot(data=dau, palette=\"tab10\", linewidth=2.5)\n\n<AxesSubplot:>\n\n\n\n\n\nHowever, the mobile platform is seeing exponential growth.\n\nsns.lineplot(data=dau[['day', 'mobile']], palette=\"tab10\", linewidth=2.5)\n\n<AxesSubplot:>\n\n\n\n\n\nThe mobile platform is notably more “sticky” though this metric could be skewed due to most of the DAUs being seen in the second half of the month. This is a metric to keep an eye on in the coming months.\n\nsns.lineplot(data=stickiness, palette=\"tab10\", linewidth=2.5)\n\n<AxesSubplot:>"
  }
]